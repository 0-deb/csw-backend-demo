"""
Django settings for CarServiceWale project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@ug+yhbgb^^)9n!ko$w^pk47w(i&u=swdyjrq$ro98@nt*1j0l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition
INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',

	# Third party installation
	'rest_framework',                       # Django REST framework 
	'corsheaders',                          # CORS
	'rest_access_policy',                   # IAM Policies
	'django_otp',                           # MFA
	'django_otp.plugins.otp_totp',          # MFA TOTP
	'django_otp.plugins.otp_hotp',
	'django_otp.plugins.otp_static',
	'storages',                             # django_storage for AWS S3
	'drf_yasg',                             # Swagger for API Documentation 
	'django_celery_beat',                   # django_celery_beat for Task Monitoring
	'django_celery_results',                # django_celery_results for Task Scheduling
	'notifications',                        # notifications results for sending push notification
	'django_filters',                       # django_filter results for data filtering and searching

	# Apps
	'Users.apps.UsersConfig',
	'Cars.apps.CarsConfig',
	# 'Billing.apps.BillingConfig',
	# 'Pentest.apps.PentestConfig',
	# 'Scanner.apps.ScannerConfig',
	# 'Vulns.apps.VulnsConfig',
	'Server.apps.ServerConfig',
	# 'RuleEngine.apps.RuleengineConfig',

	# NOTE: django cleanup should be at the end of installed apps
	'django_cleanup.apps.CleanupConfig'    # django_cleanup remove files when instance is deleted
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'Core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': 'csw_backend',
		'USER': 'csw_backend_user',
		'PASSWORD': 'B8RGGxTdziX9pAizQd2dUk1XyFYxPPra',
		'HOST': 'dpg-cfrsc2un6mphhm557hb0-a',
		'PORT': '5432',
		# 'OPTIONS': {
		#     'use_pure': True,
		#     # 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
		#     }
		}
	}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'Users.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Django REST Framework & Django JWT configuration
REST_FRAMEWORK = {
	'DEFAULT_PARSER_CLASSES': [
		'rest_framework.parsers.JSONParser',
		'rest_framework.parsers.FormParser',
		'rest_framework.parsers.MultiPartParser'
	],
	'DEFAULT_PERMISSION_CLASSES': (
		'rest_framework.permissions.IsAuthenticated',
	),
	'DEFAULT_RENDERER_CLASSES': [
		'rest_framework.renderers.JSONRenderer',
		'rest_framework.renderers.BrowsableAPIRenderer',
		'rest_framework.renderers.MultiPartRenderer'
	],
	'DEFAULT_PARSER_CLASSES': [
		'rest_framework.parsers.JSONParser',
		'rest_framework.parsers.MultiPartParser'
	],
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'Users.authentication.JWTAuthentication',
	),
	'DEFAULT_FILTER_BACKENDS': (
		'django_filters.rest_framework.DjangoFilterBackend',
		'rest_framework.filters.SearchFilter',
	),
	'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
	'PAGE_SIZE': 100,
}

JWT_Expiration_Duration = 7     # Expiration Duration in days

# CORS_ORIGIN_ALLOW_ALL: If True, all origins will be accepted (not use the whitelist below). Defaults to False.
# CORS_ORIGIN_WHITELIST: List of origins that are authorized to make cross-site HTTP requests. Defaults to [].
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:4200',
# )

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# SWAGGER API JWT Authentication
SWAGGER_SETTINGS = {
	'SECURITY_DEFINITIONS': {
	#   'Basic': {
	#         'type': 'basic'
	#   },
		'Bearer': {
			'type': 'apiKey',
			'name': 'Authorization',
			'in': 'header'
		}
	},
	'PERSIST_AUTH': True,
	'TAGS_SORTER': 'alpha',
	'VALIDATOR_URL' : None
}
